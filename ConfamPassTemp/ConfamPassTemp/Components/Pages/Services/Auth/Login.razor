@page "/login"
@using Shared.ViewModels.Auth


@inject PersistentComponentState PsComponentState

@inject PersistingAuthenticationStateProvider AuthService
@inject NavigationManager NavigationManager
<h3>Register</h3>
<EditForm class="new-blog-form" Model="@LoginViewModel" OnValidSubmit="HandleValidSubmit" FormName="login-form">
    
    <div class="form-group row">
        <label for="username" class="col-sm-2 col-form-label">Username or Email</label>
        <div class="col-sm-10">
            <InputText type="text"
                @bind-Value="LoginViewModel!.Username" class=" form-control" id="username" placeholder="Username" />
        </div>
    </div>
   
    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">Password</label>
        <div class="col-sm-10">
            <InputText type="password" @bind-Value="LoginViewModel!.Password" class="form-control" id="password"
                placeholder="Password" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </div>
</EditForm>
@code {

    private EditContext? loginContext;

    [SupplyParameterFromForm]
    public SigninRequest? LoginViewModel { get; set; }

    protected override Task OnInitializedAsync()
    {
        LoginViewModel ??= new();
        loginContext = new(LoginViewModel);

        return Task.CompletedTask;
    }
    private async void HandleValidSubmit()
    {

        var signInResponse = await AuthService.LoginAsync(LoginViewModel!);

        NavigationManager.NavigateTo("/login");
    }
}