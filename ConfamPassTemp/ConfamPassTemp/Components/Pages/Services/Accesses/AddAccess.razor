@page "/add-access";
@using ConfamPassTemp.Components.ViewModels.Events

@rendermode InteractiveServer


<section id="contact" class="contact">

    <!--  Section Title -->
    <div class="container section-title" data-aos="fade-up">
        <h2>Add Ticket</h2>
        <p>Necessitatibus eius consequatur ex aliquid fuga eum quidem sint consectetur velit</p>
    </div><!-- End Section Title -->


    <div class="container" data-aos="fade-up" data-aos-delay="100">

        <div class="col-lg-12">
            <EditForm EditContext="@editContext" action="forms/contact.php" method="post" class="php-email-form" data-aos="fade-up" data-aos-delay="200">
                <div class="row gy-4">

                    <div class="col-md-6">
                        <label class="mr-sm-2" for="nameofevent">Name of Event</label>
                        <InputText id="nameofevent" type="text" class="form-control" placeholder="Event Name" required @bind-Value="CreateEventViewModel!.Title" />
                    </div>

                    <div class="col-md-6 ">
                        <label class="mr-sm-2" for="nameofevent">Name of Event</label>
                        <InputText type="email" class="form-control" placeholder="Your Email" required @bind-Value="CreateEventViewModel!.Title" />
                    </div>

                    <div class="col-md-6">

                        <label class="mr-sm-2" for="startdate">Start Date</label>
                        <InputDate id="startdate" class="form-control" placeholder="Enter Start Date" required @bind-Value="CreateEventViewModel!.StartDate" />
                    </div>

                    <div class="col-md-6 ">
                        <label class="mr-sm-2" for="enddate">Start Date</label>

                        <InputDate id="enddate" class="form-control" placeholder="Enter End Date" required @bind-Value="CreateEventViewModel!.EndDate" />
                    </div>


                    <div class="col-md-6">
                        <label class="mr-sm-2" for="starttime">Start Date</label>
                        <InputText id="starttime" type="time" class="form-control" placeholder="Enter Time of Event" required @bind-Value="CreateEventViewModel!.StartTime" />
                    </div>

                    <div class="col-md-6" style="margin-top:3.45rem !important">
                        <div class="form-check form-switch">
                            <input type="checkbox" class="form-check-input" id="switch1" place required />
                            <label class="form-check-label" for="switch1">Is Paid?</label>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <label for="formFile" class="form-label mr-sm-2">Photos</label>
                        <InputFile class="form-control" type="file" id="formFile" />
                    </div>
                    <div class="col-md-12">
                        <label class="mr-sm-2" for="description">Start Date</label>
                        <InputTextArea id="description" class="form-control" name="message" rows="6" placeholder="Enter Description" required
                                       @bind-Value="CreateEventViewModel!.ShortDescription">

                        </InputTextArea>
                    </div>

                    <div class="col-md-12 text-center">
                        <div class="loading">Loading</div>
                        <div class="error-message"></div>
                        <div class="sent-message">Your message has been sent. Thank you!</div>

                        <button type="submit">Add Ticket</button>
                    </div>

                </div>

                @*Add subscriptions here *@
            </EditForm>
        </div>
    </div>

</section>




@code {

    private EditContext? editContext;

    [SupplyParameterFromForm]
    public CreateEventViewModel? CreateEventViewModel { get; set; }

    protected override Task OnInitializedAsync()
    {
        CreateEventViewModel ??= new();
        editContext = new(CreateEventViewModel);

        return Task.CompletedTask;
    }
}
